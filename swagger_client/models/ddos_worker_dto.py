# coding: utf-8

"""
    ❤️ Русский корабль, иди нахуй! ❤️

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DDOSWorkerDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'readable_name': 'str',
        'processes_count': 'int',
        'password': 'str',
        'executed_tasks': 'list[DDOSTaskDTO]'
    }

    attribute_map = {
        'uuid': 'uuid',
        'readable_name': 'readableName',
        'processes_count': 'processesCount',
        'password': 'password',
        'executed_tasks': 'executedTasks'
    }

    def __init__(self, uuid=None, readable_name=None, processes_count=None, password=None, executed_tasks=None):  # noqa: E501
        """DDOSWorkerDTO - a model defined in Swagger"""  # noqa: E501
        self._uuid = None
        self._readable_name = None
        self._processes_count = None
        self._password = None
        self._executed_tasks = None
        self.discriminator = None
        self.uuid = uuid
        self.readable_name = readable_name
        self.processes_count = processes_count
        if password is not None:
            self.password = password
        self.executed_tasks = executed_tasks

    @property
    def uuid(self):
        """Gets the uuid of this DDOSWorkerDTO.  # noqa: E501


        :return: The uuid of this DDOSWorkerDTO.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DDOSWorkerDTO.


        :param uuid: The uuid of this DDOSWorkerDTO.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def readable_name(self):
        """Gets the readable_name of this DDOSWorkerDTO.  # noqa: E501


        :return: The readable_name of this DDOSWorkerDTO.  # noqa: E501
        :rtype: str
        """
        return self._readable_name

    @readable_name.setter
    def readable_name(self, readable_name):
        """Sets the readable_name of this DDOSWorkerDTO.


        :param readable_name: The readable_name of this DDOSWorkerDTO.  # noqa: E501
        :type: str
        """
        if readable_name is None:
            raise ValueError("Invalid value for `readable_name`, must not be `None`")  # noqa: E501

        self._readable_name = readable_name

    @property
    def processes_count(self):
        """Gets the processes_count of this DDOSWorkerDTO.  # noqa: E501


        :return: The processes_count of this DDOSWorkerDTO.  # noqa: E501
        :rtype: int
        """
        return self._processes_count

    @processes_count.setter
    def processes_count(self, processes_count):
        """Sets the processes_count of this DDOSWorkerDTO.


        :param processes_count: The processes_count of this DDOSWorkerDTO.  # noqa: E501
        :type: int
        """
        if processes_count is None:
            raise ValueError("Invalid value for `processes_count`, must not be `None`")  # noqa: E501

        self._processes_count = processes_count

    @property
    def password(self):
        """Gets the password of this DDOSWorkerDTO.  # noqa: E501


        :return: The password of this DDOSWorkerDTO.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this DDOSWorkerDTO.


        :param password: The password of this DDOSWorkerDTO.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def executed_tasks(self):
        """Gets the executed_tasks of this DDOSWorkerDTO.  # noqa: E501


        :return: The executed_tasks of this DDOSWorkerDTO.  # noqa: E501
        :rtype: list[DDOSTaskDTO]
        """
        return self._executed_tasks

    @executed_tasks.setter
    def executed_tasks(self, executed_tasks):
        """Sets the executed_tasks of this DDOSWorkerDTO.


        :param executed_tasks: The executed_tasks of this DDOSWorkerDTO.  # noqa: E501
        :type: list[DDOSTaskDTO]
        """
        if executed_tasks is None:
            raise ValueError("Invalid value for `executed_tasks`, must not be `None`")  # noqa: E501

        self._executed_tasks = executed_tasks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DDOSWorkerDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DDOSWorkerDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
