# coding: utf-8

"""
    ❤️ Русский корабль, иди нахуй! ❤️

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DDOSWorker(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'props': 'DDOSWorkerDTO',
        'last_active': 'str'
    }

    attribute_map = {
        'props': 'props',
        'last_active': 'lastActive'
    }

    def __init__(self, props=None, last_active=None):  # noqa: E501
        """DDOSWorker - a model defined in Swagger"""  # noqa: E501
        self._props = None
        self._last_active = None
        self.discriminator = None
        self.props = props
        self.last_active = last_active

    @property
    def props(self):
        """Gets the props of this DDOSWorker.  # noqa: E501


        :return: The props of this DDOSWorker.  # noqa: E501
        :rtype: DDOSWorkerDTO
        """
        return self._props

    @props.setter
    def props(self, props):
        """Sets the props of this DDOSWorker.


        :param props: The props of this DDOSWorker.  # noqa: E501
        :type: DDOSWorkerDTO
        """
        if props is None:
            raise ValueError("Invalid value for `props`, must not be `None`")  # noqa: E501

        self._props = props

    @property
    def last_active(self):
        """Gets the last_active of this DDOSWorker.  # noqa: E501


        :return: The last_active of this DDOSWorker.  # noqa: E501
        :rtype: str
        """
        return self._last_active

    @last_active.setter
    def last_active(self, last_active):
        """Sets the last_active of this DDOSWorker.


        :param last_active: The last_active of this DDOSWorker.  # noqa: E501
        :type: str
        """
        if last_active is None:
            raise ValueError("Invalid value for `last_active`, must not be `None`")  # noqa: E501

        self._last_active = last_active

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DDOSWorker, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DDOSWorker):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
